<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="whats-new"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:xlink="http://www.w3.org/1999/xlink">
	<title>What's new in Spring Integration 3.0?</title>
	<para>
		This chapter provides an overview of the new features and improvements
		that have been introduced with Spring Integration 3.0 If you are interested
		in even more detail, please take a look at the Issue Tracker tickets that
		were resolved as part of the 3.0 development process.
	</para>

	<section id="3.0-new-components">
		<title>New Components</title>
		<section id="3.0-tcp-events">
			<title>TCP/IP Connection Events and Connection Management</title>
			<para>
				The (supplied) <classname>TcpConnection</classname>s now emit
				<interfacename>ApplicationEvent</interfacename>s (specifically
				<classname>TcpConnectionEvent</classname>s) when connections are
				opened, closed, or an exception occurs. This allows applications
				to be informed of changes to TCP connections using the normal
				Spring <interfacename>ApplicationListener</interfacename>
				mechanism.
			</para>
			<para>
				<classname>AbstractTcpConnection</classname> has been renamed
				<classname>TcpConnectionSupport</classname>; custom connections that
				are subclasses of this class, can use its methods to publish events.
				Similarly, <classname>AbstractTcpConnectionInterceptor</classname> has
				been renamed to <classname>TcpConnectionInterceptorSupport</classname>.
			</para>
			<para>
				In addition, a new <code>&lt;int-ip:tcp-connection-event-inbound-channel-adapter/&gt;</code>
				is provided; by default, this adapter sends all <classname>TcpConnectionEvent</classname>s
				to a <interfacename>Channel</interfacename>.
			</para>
			<para>
				Further, the TCP Connection Factories, now provide a new method
				<code>getOpenConnectionIds()</code>, which returns a list of identifiers for all
				open connections; this allows applications, for example, to broadcast to all
				open connections.
			</para>
			<para>
				Finally, the connection factories also provide a new method
				<code>closeConnection(String connectionId)</code> which allows applications
				to explicitly close a connection using its ID.
			</para>
			<para>
				For more information see <xref linkend="tcp-events"/>.
			</para>
		</section>
		<section id="3.0-syslog">
			<title>Syslog Support</title>
			<para>
				Building on the 2.2 <classname>SyslogToMapTransformer</classname> Spring
				Integration 3.0 now introduces
				<code>UDP</code> and <code>TCP</code> inbound channel adapters especially tailored
				for receiving SYSLOG messages. For more information, see
				<xref linkend="syslog"/>.
			</para>
		</section>
		<section id="3.0-tail">
			<title>'Tail' Support</title>
			<para>
				File 'tail'ing inbound channel adapters are now provided to generate messages when
				lines are added to the end of text files.
				<xref linkend="file-tailing"/>.
			</para>
		</section>
	</section>

	<section id="3.0-general">
		<title>General Changes</title>

		<section id="3.0-corr-endpoint-empty-groups">
			<title>Aggregator 'empty-group-min-timeout' property</title>
				<para><classname>AbstractCorrelatingMessageHandler</classname> provides a new property
					<code>empty-group-min-timeout</code>
					to allow empty group expiry to run on a longer schedule than expiring partial groups. Empty groups will
					not be removed from the <interfacename>MessageStore</interfacename> until they have not been modified
					for at least this number of milliseconds. For more information see <xref linkend="aggregator-config"/>.
				</para>
		</section>
		<section id="3.0-advising-filters">
			<title>Advising Filters</title>
			<para>
				Previously, when a &lt;filter/&gt; had a &lt;request-handler-advice-chain/&gt;, the discard
				action was all performed within the scope of the advice chain (including any downstream flow
				on the <code>discard-channel</code>). The filter element now has an attribute
				<code>discard-within-advice</code> (default <code>true</code>), to allow the discard action to
				be performed after the advice chain completes. See <xref linkend="advising-filters"/>.
			</para>
		</section>
		<section id="3.0-o-t-s-t">
			<title>ObjectToStringTransformer Improvements</title>
			<para>
				This transformer now correctly transforms <code>byte[]</code> and <code>char[]</code>
				payloads to <classname>String</classname>. For more information see <xref linkend="transformer"/>.
			</para>
		</section>
		<section id="3.0-ws-outbound-uri-substitution">
			<title>Web Service Outbound URI Configuration</title>
			<para>
				Web Service Outbound Gateway 'uri' attribute now supports <code>&lt;uri-variable/&gt;</code> substitution for all
				URI-schemes supported by Spring Web Services. For more information see <xref linkend="outbound-uri"/>.
			</para>
		</section>
		<section id="3.0-xFTP-ib">
			<title>(S)FTP(S) Inbound Adapters</title>
			<para>
				Previously, there was no way to override the default filter used to process files retrieved
				from a remote server. The <code>filter</code> attribute determines which files are retrieved
				but the <classname>FileReadingMessageSource</classname> uses an
				<classname>AcceptOnceFileListFilter</classname>. This means that if a new copy of a file
				is retrieved, with the same name as a previously copied file, no message was sent from the
				adapter.
			</para>
			<para>
				With this release, a new attribute <code>local-filter</code> allows you to override the
				default filter, for example with an <classname>AcceptAllFileListFilter</classname>, or some
				other custom filter.
			</para>
			<para>
				For users that wish the behavior of the <classname>AcceptOnceFileListFilter</classname>
				to be maintained across JVM executions, a custom filter that retains state, perhaps on
				the file system, can now be configured.
			</para>
		</section>
		<section id="3.0-xFTP-gw">
			<title>(S)FTP(S) Gateways</title>
			<para>
				The gateways now support the <code>mv</code> command, enabling the renaming of remote
				files.
			</para>
		</section>
		<section id="3.0-jdbc-mysql-v5_6_4">
			<title>JDBC Message Store Improvements</title>
			<para>
				<emphasis>Spring Integration 3.0</emphasis> adds a new set of DDL
				scripts for <emphasis>MySQL</emphasis> version 5.6.4 and higher.
				Now <emphasis>MySQL</emphasis> supports <emphasis>fractional
				seconds</emphasis> and is thus improving the FIFO ordering when
				polling from a MySQL-based Message Store. For more information,
				please see <xref linkend="jdbc-message-store-generic"/>.
			</para>
		</section>
		<section id="3.0-json-transformers">
			<title>Jackson Support (JSON)</title>
			<para>
				A new abstraction for JSON conversion has been introduced. Implementations for Jackson 1.x
				and Jackson 2 are currently provided, with the version being determined by presence on
				the classpath. Previously, only Jackson 1.x was supported. For more information,
				see 'JSON Transformers' in <xref linkend="transformer"/>.
			</para>
		</section>
		<section id="3.0-http-encode-uri">
			<title>HTTP Outbound Endpoint 'encode-uri' property</title>
			<para>
				<code>&lt;http:outbound-gateway/&gt;</code> and <code>&lt;http:outbound-channel-adapter/&gt;</code> now
				provide an <code>encode-uri</code> attribute to allow disabling the encoding of the URI object
				before sending the request. For more information see <xref linkend="http"/>.
			</para>
		</section>
		<section id="3.0-amqp-mapping">
			<title>AMQP Outbound Gateway Header Mapping</title>
			<para>
				Previously, the &lt;int-amqp:outbound-gateway/&gt; mapped headers before invoking the message
				converter, and the converter could overwrite headers such as <code>content-type</code>. The
				outbound adapter maps the headers after the conversion, which means headers like
				<code>content-type</code> from the outbound <code>Message</code> (if present) are used.
			</para>
			<para>
				Starting with this release, the gateway now maps the headers after the message conversion,
				consistent with the adapter. If your application relies on the previous behavior (where the
				converter's headers overrode the mapped headers), you either need to filter those headers
				(before the message reaches the gateway)
				or set them appropriately. The headers affected by the <classname>SimpleMessageConverter</classname>
				are <code>content-type</code> and <code>content-encoding</code>. Custom message converters
				may set other headers.
			</para>
		</section>
		<section id="3.0-id-for-chain-sub-components">
			<title>Chain Elements 'id' Attribute</title>
			<para>
				Previously, the <emphasis>id</emphasis> attribute for elements within a <code>&lt;chain&gt;</code> was
				ignored and, in some cases, disallowed. Now, the <emphasis>id</emphasis> attribute is allowed
				for all elements within a <code>&lt;chain&gt;</code>. The bean names of chain elements is a combination
				of the surrounding chain's <emphasis>id</emphasis> and the <emphasis>id</emphasis> of the element
				itself. For example: 'fooChain$child.fooTransformer.handler'.
				For more information see <xref linkend="chain"/>.
			</para>
		</section>

	</section>
</chapter>
