
// ensure that every project has been evaluated before this script
// this allows us to look up tasks below and dereference dynamically
// assigned properties like 'docsSpec' below
project.subprojects.each { project ->
    evaluationDependsOn project.path
}

task check {
    group = 'Verification'
}

task build(dependsOn: [check, assemble]) {
    group = 'Build'
}

/**
 * Build the distribution zip file.
 *
 * @author Chris Beams
 */
task distArchive(type: Zip) {
    destinationDir = buildDir
    archiveName = "${project.name}-${project.version}.zip"
    def zipRootDir = "${project.name}-${project.version}"

    description = "Builds the distribution zip file at ${project.relativePath(destinationDir)}/${archiveName}"

    // depend on all projects with an assemble task
    dependsOn subprojects*.tasks*.matching { task -> task.name == 'assemble' }

    // configure the contents of the zip file. remember that this is a
    // configuration phase event. no zip is being created yet. the Zip
    // task we extend will do that for us during the execution phase.
    into(zipRootDir) {
        into('libs') {
            from javaprojects.collect { project -> project.libsDir }
        }

        into('') {
            from('docs/src/info')
        }

        into("docs/api") {
            from("docs/build/api")
        }

        into("docs/reference") {
            from("docs/build/reference")
        }
    }

}
